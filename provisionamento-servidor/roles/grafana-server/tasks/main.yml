---
#TODO criar o diretorio, se preciso, antes. Se "aux_uses_lvm" for false e o base_dir
#     n√£o existir, teremos erro.

#TODO parte do lvm

- name: "Criar grupo grafana (docker image uses grafana/472)"
  group:
    name: grafana
    gid: 472
    state: present
  when: grafana_create_user
  tags:
    - kubetrt3.grafana-server.dirs

- name: "Criar usuario grafana (docker image uses grafana/472)"
  user:
    name: grafana
    group: grafana
    uid: 472
    create_home: no
    state: present
    shell: /bin/false
    password: '!'
  when: grafana_create_user    
  tags:
    - kubetrt3.grafana-server.dirs

- name: "Grafana mount filesystem from LV"
  ansible.posix.mount:
    backup: yes
    path: "{{ grafana_base_dir }}"
    src: "/dev/{{ vg_data_name }}/grafana"
    fstype: xfs
    #opts:
    state: mounted
  when: aux_uses_lvm
  tags:
    - kubetrt3.grafana-server.dirs

- name: "Grafana config directory (bind volume)"
  file:
    path: "{{ grafana_base_dir }}/config"
    state: directory
    owner: grafana
    group: grafana
    mode: 0770
  tags:
    - kubetrt3.grafana-server.dirs

- name: "Grafana storage directory (bind volume)"
  file:
    path: "{{ grafana_base_dir }}/storage"
    state: directory
    owner: grafana    
    group: grafana
    mode: 0770
  tags:
    - kubetrt3.grafana-server.dirs

#- name: "Grafana tls directory (bind volume)"
#  file:
#    path: "{{ grafana_base_dir }}/tls"
#    state: directory
#    group: grafana
#    mode: 0770
#  tags:
#    - grafana.dirs

#- name: "Copia os arquivos crt, chave e cadeia"
#  template:
#    src: "{{ loadbalancer_x509_full }}"
#    dest: "{{ grafana_base_dir }}/tls/full.pem"
#    mode: 0400

- name: "Grafana container (pull image)"
  community.docker.docker_image:
    name: grafana/grafana
    tag: "{{ grafana_version }}"
    state: present
    source: pull
  tags: 
    - kubetrt3.grafana-server.pull.image
    - kubetrt3.grafana-server.update

- name: "Grafana config file (ini)"
  template:
    src: "{{ item.itemsrc }}"
    dest: "{{ item.itemdest }}"
    group: grafana
    owner: grafana
    mode: 0770
  loop:
    - { itemsrc: "{{ grafana_config_file }}", itemdest: "{{ grafana_base_dir }}/config/grafana.ini" }
  tags:
    - kubetrt3.grafana-server.cfg.copy
    - kubetrt3.grafana-server.update

- name: "Grafana config file (ldap)"
  template:
    src: "{{ item.itemsrc }}"
    dest: "{{ item.itemdest }}"
    owner: grafana
    group: grafana
    mode: 0770
  loop:
    - { itemsrc: "{{ grafana_ldap_config_file }}", itemdest: "{{ grafana_base_dir }}/config/ldap.toml" }
  when: grafana_use_ldap    
  tags:
    - kubetrt3.grafana-server.cfg.copy
    - kubetrt3.grafana-server.update

# TODO
#- name: "Grafana testar config file"

- name: "Grafana start up"
  community.docker.docker_container:
    name: grafana
    auto_remove: no
    detach: yes
    init: no
    interactive: no
    paused: no
    privileged: no
    read_only: no
    memory: 0
    # afetava: auto_remove, detach, init, interactive, memory, paused, privileged, read_only and tty options.
    container_default_behavior: no_defaults    
    image: "grafana/grafana:{{grafana_version}}"
    state: started
    recreate: yes
    restart: yes
    restart_policy: always
    network_mode: "{{ 'bridge' if aux_docker_network_name is not defined else aux_docker_network_name }}"
    networks:
      - name: "{{ 'bridge' if aux_docker_network_name is not defined else aux_docker_network_name }}"
    networks_cli_compatible: yes       
    log_driver: "{{ grafana_docker_log_driver }}"
    log_options: "{{ grafana_docker_log_options }}"
    volumes:
      - "{{ grafana_base_dir }}/storage:/var/lib/grafana"
      - "{{ grafana_base_dir }}/config:/etc/grafana"
    exposed_ports: "{{ grafana_container_ports }}"
    labels: "{{ grafana_container_labels }}"
    ports: "{{ grafana_container_port_mappings }}"
    env:
      GF_SERVER_DOMAIN: "{{ grafana_domain }}"
      GF_SERVER_ROOT_URL: "http://{{ grafana_domain }}/"
  tags:
    - kubetrt3.grafana-server.start_restart
    - kubetrt3.grafana-server.update
...
